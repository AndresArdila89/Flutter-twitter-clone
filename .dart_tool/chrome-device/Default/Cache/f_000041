define(['dart_sdk', 'packages/boolean_selector/src/parser.dart', 'packages/boolean_selector/src/evaluator.dart', 'packages/boolean_selector/src/visitor.dart', 'packages/boolean_selector/src/validator.dart'], (function load__packages__boolean_selector__src__none_dart(dart_sdk, packages__boolean_selector__src__parser$46dart, packages__boolean_selector__src__evaluator$46dart, packages__boolean_selector__src__visitor$46dart, packages__boolean_selector__src__validator$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const parser = packages__boolean_selector__src__parser$46dart.src__parser;
  const evaluator = packages__boolean_selector__src__evaluator$46dart.src__evaluator;
  const ast = packages__boolean_selector__src__visitor$46dart.src__ast;
  const validator = packages__boolean_selector__src__validator$46dart.src__validator;
  var none = Object.create(dart.library);
  var union_selector = Object.create(dart.library);
  var intersection_selector = Object.create(dart.library);
  var impl = Object.create(dart.library);
  var all = Object.create(dart.library);
  var boolean_selector = Object.create(dart.library);
  var $toList = dartx.toList;
  var $addAll = dartx.addAll;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    SyncIterableOfString: () => (T.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], core.String);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: all.All.prototype,
        [variables$]: C[0] || CT.C0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: none.None.prototype,
        [variables]: C[0] || CT.C0
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/none.dart",
    "package:boolean_selector/src/none.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/union_selector.dart",
    "package:boolean_selector/src/union_selector.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/intersection_selector.dart",
    "package:boolean_selector/src/intersection_selector.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/impl.dart",
    "package:boolean_selector/src/impl.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/all.dart",
    "package:boolean_selector/src/all.dart",
    "package:boolean_selector/boolean_selector.dart"
  ];
  var variables = dart.privateName(none, "None.variables");
  none.None = class None extends core.Object {
    get variables() {
      return this[variables];
    }
    set variables(value) {
      super.variables = value;
    }
    evaluate(semantics) {
      if (semantics == null) dart.nullFailed(I[0], 15, 48, "semantics");
      return false;
    }
    intersection(other) {
      if (other == null) dart.nullFailed(I[0], 18, 48, "other");
      return this;
    }
    union(other) {
      if (other == null) dart.nullFailed(I[0], 21, 41, "other");
      return other;
    }
    validate(isDefined) {
      if (isDefined == null) dart.nullFailed(I[0], 24, 39, "isDefined");
    }
    toString() {
      return "<none>";
    }
  };
  (none.None.new = function() {
    this[variables] = C[0] || CT.C0;
    ;
  }).prototype = none.None.prototype;
  dart.addTypeTests(none.None);
  dart.addTypeCaches(none.None);
  none.None[dart.implements] = () => [boolean_selector.BooleanSelector];
  dart.setMethodSignature(none.None, () => ({
    __proto__: dart.getMethods(none.None.__proto__),
    evaluate: dart.fnType(core.bool, [dart.fnType(core.bool, [core.String])]),
    intersection: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    union: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    validate: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String])])
  }));
  dart.setLibraryUri(none.None, I[1]);
  dart.setFieldSignature(none.None, () => ({
    __proto__: dart.getFields(none.None.__proto__),
    variables: dart.finalFieldType(core.Iterable$(core.String))
  }));
  dart.defineExtensionMethods(none.None, ['toString']);
  var _selector1$ = dart.privateName(union_selector, "_selector1");
  var _selector2$ = dart.privateName(union_selector, "_selector2");
  union_selector.UnionSelector = class UnionSelector extends core.Object {
    get variables() {
      let t0;
      t0 = this[_selector1$].variables[$toList]();
      return (() => {
        t0[$addAll](this[_selector2$].variables);
        return t0;
      })();
    }
    evaluate(semantics) {
      if (semantics == null) dart.nullFailed(I[2], 20, 48, "semantics");
      return dart.test(this[_selector1$].evaluate(semantics)) || dart.test(this[_selector2$].evaluate(semantics));
    }
    intersection(other) {
      if (other == null) dart.nullFailed(I[2], 24, 48, "other");
      return new intersection_selector.IntersectionSelector.new(this, other);
    }
    union(other) {
      if (other == null) dart.nullFailed(I[2], 28, 41, "other");
      return new union_selector.UnionSelector.new(this, other);
    }
    validate(isDefined) {
      if (isDefined == null) dart.nullFailed(I[2], 31, 48, "isDefined");
      this[_selector1$].validate(isDefined);
      this[_selector2$].validate(isDefined);
    }
    toString() {
      return "(" + dart.str(this[_selector1$]) + ") && (" + dart.str(this[_selector2$]) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return union_selector.UnionSelector.is(other) && dart.equals(this[_selector1$], other[_selector1$]) && dart.equals(this[_selector2$], other[_selector2$]);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this[_selector1$])) ^ dart.notNull(dart.hashCode(this[_selector2$]))) >>> 0;
    }
  };
  (union_selector.UnionSelector.new = function(_selector1, _selector2) {
    if (_selector1 == null) dart.nullFailed(I[2], 13, 22, "_selector1");
    if (_selector2 == null) dart.nullFailed(I[2], 13, 39, "_selector2");
    this[_selector1$] = _selector1;
    this[_selector2$] = _selector2;
    ;
  }).prototype = union_selector.UnionSelector.prototype;
  dart.addTypeTests(union_selector.UnionSelector);
  dart.addTypeCaches(union_selector.UnionSelector);
  union_selector.UnionSelector[dart.implements] = () => [boolean_selector.BooleanSelector];
  dart.setMethodSignature(union_selector.UnionSelector, () => ({
    __proto__: dart.getMethods(union_selector.UnionSelector.__proto__),
    evaluate: dart.fnType(core.bool, [dart.fnType(core.bool, [core.String])]),
    intersection: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    union: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    validate: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String])])
  }));
  dart.setGetterSignature(union_selector.UnionSelector, () => ({
    __proto__: dart.getGetters(union_selector.UnionSelector.__proto__),
    variables: core.List$(core.String)
  }));
  dart.setLibraryUri(union_selector.UnionSelector, I[3]);
  dart.setFieldSignature(union_selector.UnionSelector, () => ({
    __proto__: dart.getFields(union_selector.UnionSelector.__proto__),
    [_selector1$]: dart.finalFieldType(boolean_selector.BooleanSelector),
    [_selector2$]: dart.finalFieldType(boolean_selector.BooleanSelector)
  }));
  dart.defineExtensionMethods(union_selector.UnionSelector, ['toString', '_equals']);
  dart.defineExtensionAccessors(union_selector.UnionSelector, ['hashCode']);
  var _selector1$0 = dart.privateName(intersection_selector, "_selector1");
  var _selector2$0 = dart.privateName(intersection_selector, "_selector2");
  intersection_selector.IntersectionSelector = class IntersectionSelector extends core.Object {
    get variables() {
      return new (T.SyncIterableOfString()).new((function* variables() {
        yield* this[_selector1$0].variables;
        yield* this[_selector2$0].variables;
      }).bind(this));
    }
    evaluate(semantics) {
      if (semantics == null) dart.nullFailed(I[4], 22, 17, "semantics");
      return dart.test(this[_selector1$0].evaluate(semantics)) && dart.test(this[_selector2$0].evaluate(semantics));
    }
    intersection(other) {
      if (other == null) dart.nullFailed(I[4], 26, 48, "other");
      return new intersection_selector.IntersectionSelector.new(this, other);
    }
    union(other) {
      if (other == null) dart.nullFailed(I[4], 30, 41, "other");
      return new union_selector.UnionSelector.new(this, other);
    }
    validate(isDefined) {
      if (isDefined == null) dart.nullFailed(I[4], 33, 48, "isDefined");
      this[_selector1$0].validate(isDefined);
      this[_selector2$0].validate(isDefined);
    }
    toString() {
      return "(" + dart.str(this[_selector1$0]) + ") && (" + dart.str(this[_selector2$0]) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return intersection_selector.IntersectionSelector.is(other) && dart.equals(this[_selector1$0], other[_selector1$0]) && dart.equals(this[_selector2$0], other[_selector2$0]);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this[_selector1$0])) ^ dart.notNull(dart.hashCode(this[_selector2$0]))) >>> 0;
    }
  };
  (intersection_selector.IntersectionSelector.new = function(_selector1, _selector2) {
    if (_selector1 == null) dart.nullFailed(I[4], 19, 29, "_selector1");
    if (_selector2 == null) dart.nullFailed(I[4], 19, 46, "_selector2");
    this[_selector1$0] = _selector1;
    this[_selector2$0] = _selector2;
    ;
  }).prototype = intersection_selector.IntersectionSelector.prototype;
  dart.addTypeTests(intersection_selector.IntersectionSelector);
  dart.addTypeCaches(intersection_selector.IntersectionSelector);
  intersection_selector.IntersectionSelector[dart.implements] = () => [boolean_selector.BooleanSelector];
  dart.setMethodSignature(intersection_selector.IntersectionSelector, () => ({
    __proto__: dart.getMethods(intersection_selector.IntersectionSelector.__proto__),
    evaluate: dart.fnType(core.bool, [dart.fnType(core.bool, [core.String])]),
    intersection: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    union: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    validate: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String])])
  }));
  dart.setGetterSignature(intersection_selector.IntersectionSelector, () => ({
    __proto__: dart.getGetters(intersection_selector.IntersectionSelector.__proto__),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(intersection_selector.IntersectionSelector, I[5]);
  dart.setFieldSignature(intersection_selector.IntersectionSelector, () => ({
    __proto__: dart.getFields(intersection_selector.IntersectionSelector.__proto__),
    [_selector1$0]: dart.finalFieldType(boolean_selector.BooleanSelector),
    [_selector2$0]: dart.finalFieldType(boolean_selector.BooleanSelector)
  }));
  dart.defineExtensionMethods(intersection_selector.IntersectionSelector, ['toString', '_equals']);
  dart.defineExtensionAccessors(intersection_selector.IntersectionSelector, ['hashCode']);
  var _selector$ = dart.privateName(impl, "_selector");
  impl.BooleanSelectorImpl = class BooleanSelectorImpl extends core.Object {
    get variables() {
      return this[_selector$].variables;
    }
    evaluate(semantics) {
      if (semantics == null) dart.nullFailed(I[6], 35, 48, "semantics");
      return this[_selector$].accept(core.bool, new evaluator.Evaluator.new(semantics));
    }
    intersection(other) {
      if (other == null) dart.nullFailed(I[6], 39, 48, "other");
      if (dart.equals(other, boolean_selector.BooleanSelector.all)) return this;
      if (dart.equals(other, boolean_selector.BooleanSelector.none)) return other;
      return impl.BooleanSelectorImpl.is(other) ? new impl.BooleanSelectorImpl.__(new ast.AndNode.new(this[_selector$], other[_selector$])) : new intersection_selector.IntersectionSelector.new(this, other);
    }
    union(other) {
      if (other == null) dart.nullFailed(I[6], 48, 41, "other");
      if (dart.equals(other, boolean_selector.BooleanSelector.all)) return other;
      if (dart.equals(other, boolean_selector.BooleanSelector.none)) return this;
      return impl.BooleanSelectorImpl.is(other) ? new impl.BooleanSelectorImpl.__(new ast.OrNode.new(this[_selector$], other[_selector$])) : new union_selector.UnionSelector.new(this, other);
    }
    validate(isDefined) {
      if (isDefined == null) dart.nullFailed(I[6], 57, 48, "isDefined");
      this[_selector$].accept(dart.void, new validator.Validator.new(isDefined));
    }
    toString() {
      return dart.toString(this[_selector$]);
    }
    _equals(other) {
      if (other == null) return false;
      return impl.BooleanSelectorImpl.is(other) && dart.equals(this[_selector$], other[_selector$]);
    }
    get hashCode() {
      return dart.hashCode(this[_selector$]);
    }
  };
  (impl.BooleanSelectorImpl.parse = function(selector) {
    if (selector == null) dart.nullFailed(I[6], 26, 36, "selector");
    this[_selector$] = new parser.Parser.new(selector).parse();
    ;
  }).prototype = impl.BooleanSelectorImpl.prototype;
  (impl.BooleanSelectorImpl.__ = function(_selector) {
    if (_selector == null) dart.nullFailed(I[6], 29, 30, "_selector");
    this[_selector$] = _selector;
    ;
  }).prototype = impl.BooleanSelectorImpl.prototype;
  dart.addTypeTests(impl.BooleanSelectorImpl);
  dart.addTypeCaches(impl.BooleanSelectorImpl);
  impl.BooleanSelectorImpl[dart.implements] = () => [boolean_selector.BooleanSelector];
  dart.setMethodSignature(impl.BooleanSelectorImpl, () => ({
    __proto__: dart.getMethods(impl.BooleanSelectorImpl.__proto__),
    evaluate: dart.fnType(core.bool, [dart.fnType(core.bool, [core.String])]),
    intersection: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    union: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    validate: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String])])
  }));
  dart.setGetterSignature(impl.BooleanSelectorImpl, () => ({
    __proto__: dart.getGetters(impl.BooleanSelectorImpl.__proto__),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(impl.BooleanSelectorImpl, I[7]);
  dart.setFieldSignature(impl.BooleanSelectorImpl, () => ({
    __proto__: dart.getFields(impl.BooleanSelectorImpl.__proto__),
    [_selector$]: dart.finalFieldType(ast.Node)
  }));
  dart.defineExtensionMethods(impl.BooleanSelectorImpl, ['toString', '_equals']);
  dart.defineExtensionAccessors(impl.BooleanSelectorImpl, ['hashCode']);
  var variables$ = dart.privateName(all, "All.variables");
  all.All = class All extends core.Object {
    get variables() {
      return this[variables$];
    }
    set variables(value) {
      super.variables = value;
    }
    evaluate(semantics) {
      if (semantics == null) dart.nullFailed(I[8], 17, 48, "semantics");
      return true;
    }
    intersection(other) {
      if (other == null) dart.nullFailed(I[8], 20, 48, "other");
      return other;
    }
    union(other) {
      if (other == null) dart.nullFailed(I[8], 23, 41, "other");
      return this;
    }
    validate(isDefined) {
      if (isDefined == null) dart.nullFailed(I[8], 26, 48, "isDefined");
    }
    toString() {
      return "<all>";
    }
  };
  (all.All.new = function() {
    this[variables$] = C[0] || CT.C0;
    ;
  }).prototype = all.All.prototype;
  dart.addTypeTests(all.All);
  dart.addTypeCaches(all.All);
  all.All[dart.implements] = () => [boolean_selector.BooleanSelector];
  dart.setMethodSignature(all.All, () => ({
    __proto__: dart.getMethods(all.All.__proto__),
    evaluate: dart.fnType(core.bool, [dart.fnType(core.bool, [core.String])]),
    intersection: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    union: dart.fnType(boolean_selector.BooleanSelector, [boolean_selector.BooleanSelector]),
    validate: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String])])
  }));
  dart.setLibraryUri(all.All, I[9]);
  dart.setFieldSignature(all.All, () => ({
    __proto__: dart.getFields(all.All.__proto__),
    variables: dart.finalFieldType(core.Iterable$(core.String))
  }));
  dart.defineExtensionMethods(all.All, ['toString']);
  boolean_selector.BooleanSelector = class BooleanSelector extends core.Object {};
  (boolean_selector.BooleanSelector[dart.mixinNew] = function() {
  }).prototype = boolean_selector.BooleanSelector.prototype;
  dart.addTypeTests(boolean_selector.BooleanSelector);
  dart.addTypeCaches(boolean_selector.BooleanSelector);
  dart.setLibraryUri(boolean_selector.BooleanSelector, I[10]);
  dart.defineLazy(boolean_selector.BooleanSelector, {
    /*boolean_selector.BooleanSelector.all*/get all() {
      return C[1] || CT.C1;
    },
    /*boolean_selector.BooleanSelector.none*/get none() {
      return C[2] || CT.C2;
    }
  }, false);
  dart.trackLibraries("packages/boolean_selector/src/none.dart", {
    "package:boolean_selector/src/none.dart": none,
    "package:boolean_selector/src/union_selector.dart": union_selector,
    "package:boolean_selector/src/intersection_selector.dart": intersection_selector,
    "package:boolean_selector/src/impl.dart": impl,
    "package:boolean_selector/src/all.dart": all,
    "package:boolean_selector/boolean_selector.dart": boolean_selector
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["none.dart","union_selector.dart","intersection_selector.dart","impl.dart","all.dart","../boolean_selector.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASyB;;;;;;;UAKsB;AAAc;IAAK;;UAGnB;AAAU;IAAI;;UAGrB;AAAU,kBAAK;;;UAGjB;IAAY;;AAG3B;IAAQ;;;IAjBN;;EAEX;;;;;;;;;;;;;;;;;;;;;;ACKR,WAAA,AAAW,AAAU;YAAA;AAAU,oBAAO,AAAW;;;IAAU;;UAGlB;AACzC,YAA+B,WAA/B,AAAW,2BAAS,SAAS,gBAAK,AAAW,2BAAS,SAAS;IAAC;;UAGvB;AACzC,gEAAqB,MAAM,KAAK;IAAC;;UAGC;AAAU,kDAAc,MAAM,KAAK;IAAC;;UAG7B;AACb,MAA9B,AAAW,2BAAS,SAAS;AACC,MAA9B,AAAW,2BAAS,SAAS;IAC/B;;AAGqB,YAAA,AAAgC,gBAA7B,qBAAU,oBAAO,qBAAU;IAAE;;UAGpC;AACb,YAAM,AACyB,iCAD/B,KAAK,KACM,YAAX,mBAAc,AAAM,KAAD,kBACR,YAAX,mBAAc,AAAM,KAAD;IAAW;;AAGd,YAAoB,eAAT,cAAX,mCAAiC,cAAX;IAAmB;;+CAjC1C,YAAiB;QAAjB;QAAiB;IAAjB;IAAiB;;EAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;ACChB;AAC7B,eAAO,AAAW;AAClB,eAAO,AAAW;MACpB;;;UAKc;AACV,YAA+B,WAA/B,AAAW,4BAAS,SAAS,gBAAK,AAAW,4BAAS,SAAS;IAAC;;UAGvB;AACzC,gEAAqB,MAAM,KAAK;IAAC;;UAGC;AAAU,kDAAc,MAAM,KAAK;IAAC;;UAG7B;AACb,MAA9B,AAAW,4BAAS,SAAS;AACC,MAA9B,AAAW,4BAAS,SAAS;IAC/B;;AAGqB,YAAA,AAAgC,gBAA7B,sBAAU,oBAAO,sBAAU;IAAE;;UAGpC;AACb,YAAM,AACyB,+CAD/B,KAAK,KACM,YAAX,oBAAc,AAAM,KAAD,mBACR,YAAX,oBAAc,AAAM,KAAD;IAAW;;AAGd,YAAoB,eAAT,cAAX,oCAAiC,cAAX;IAAmB;;6DA7BnC,YAAiB;QAAjB;QAAiB;IAAjB;IAAiB;;EAAW;;;;;;;;;;;;;;;;;;;;;;;;;;ACapB,YAAA,AAAU;IAAS;;UAGR;AACzC,YAAA,AAAU,oCAAO,4BAAU,SAAS;IAAE;;UAGG;AAC3C,UAAU,YAAN,KAAK,EAAoB,uCAAK,MAAO;AACzC,UAAU,YAAN,KAAK,EAAoB,wCAAM,MAAO,MAAK;AAC/C,YAAa,6BAAN,KAAK,IACc,gCAAE,oBAAQ,kBAAW,AAAM,KAAD,iBAC9C,mDAAqB,MAAM,KAAK;IACxC;;UAGsC;AACpC,UAAU,YAAN,KAAK,EAAoB,uCAAK,MAAO,MAAK;AAC9C,UAAU,YAAN,KAAK,EAAoB,wCAAM,MAAO;AAC1C,YAAa,6BAAN,KAAK,IACc,gCAAE,mBAAO,kBAAW,AAAM,KAAD,iBAC7C,qCAAc,MAAM,KAAK;IACjC;;UAG6C;AACL,MAAtC,AAAU,mCAAO,4BAAU,SAAS;IACtC;;AAGqB,YAAU,eAAV;IAAoB;;UAGxB;AACb,YAAM,AAAuB,6BAA7B,KAAK,KAAqC,YAAV,kBAAa,AAAM,KAAD;IAAU;;AAG5C,YAAU,eAAV;IAAkB;;;QA3CL;IACjB,mBAAE,AAAiB,sBAAV,QAAQ;;EAAS;;QAEf;;;EAAU;;;;;;;;;;;;;;;;;;;;;;;;ICjBd;;;;;;;UAKsB;AAAc;IAAI;;UAGlB;AAAU,kBAAK;;;UAGtB;AAAU;IAAI;;UAGP;IAAY;;AAGpC;IAAO;;;IAjBL;;EAEZ;;;;;;;;;;;;;;;;;;;;;;;;MCSE,oCAAG;;;MAGH,qCAAI","file":"../../../../../../../../E:/packages/boolean_selector/src/none.dart.lib.js"}');
  // Exports:
  return {
    src__none: none,
    src__union_selector: union_selector,
    src__intersection_selector: intersection_selector,
    src__impl: impl,
    src__all: all,
    boolean_selector: boolean_selector
  };
}));

//# sourceMappingURL=none.dart.lib.js.map
