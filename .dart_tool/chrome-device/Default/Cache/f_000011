define(['dart_sdk', 'packages/source_span/src/location_mixin.dart'], (function load__packages__boolean_selector__src__visitor_dart(dart_sdk, packages__source_span__src__location_mixin$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const file = packages__source_span__src__location_mixin$46dart.src__file;
  var visitor = Object.create(dart.library);
  var ast = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    SyncIterableOfString: () => (T.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "package:boolean_selector/src/visitor.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/visitor.dart",
    "package:boolean_selector/src/ast.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/boolean_selector-2.1.0/lib/src/ast.dart"
  ];
  const _is_Visitor_default = Symbol('_is_Visitor_default');
  visitor.Visitor$ = dart.generic(T => {
    class Visitor extends core.Object {}
    (Visitor.new = function() {
      ;
    }).prototype = Visitor.prototype;
    dart.addTypeTests(Visitor);
    Visitor.prototype[_is_Visitor_default] = true;
    dart.addTypeCaches(Visitor);
    dart.setLibraryUri(Visitor, I[0]);
    return Visitor;
  });
  visitor.Visitor = visitor.Visitor$();
  dart.addTypeTests(visitor.Visitor, _is_Visitor_default);
  visitor.RecursiveVisitor = class RecursiveVisitor extends core.Object {
    visitVariable(node) {
      if (node == null) dart.nullFailed(I[1], 24, 35, "node");
    }
    visitNot(node) {
      if (node == null) dart.nullFailed(I[1], 27, 25, "node");
      node.child.accept(dart.void, this);
    }
    visitOr(node) {
      if (node == null) dart.nullFailed(I[1], 32, 23, "node");
      node.left.accept(dart.void, this);
      node.right.accept(dart.void, this);
    }
    visitAnd(node) {
      if (node == null) dart.nullFailed(I[1], 38, 25, "node");
      node.left.accept(dart.void, this);
      node.right.accept(dart.void, this);
    }
    visitConditional(node) {
      if (node == null) dart.nullFailed(I[1], 44, 41, "node");
      node.condition.accept(dart.void, this);
      node.whenTrue.accept(dart.void, this);
      node.whenFalse.accept(dart.void, this);
    }
  };
  (visitor.RecursiveVisitor.new = function() {
    ;
  }).prototype = visitor.RecursiveVisitor.prototype;
  dart.addTypeTests(visitor.RecursiveVisitor);
  dart.addTypeCaches(visitor.RecursiveVisitor);
  visitor.RecursiveVisitor[dart.implements] = () => [visitor.Visitor$(dart.void)];
  dart.setMethodSignature(visitor.RecursiveVisitor, () => ({
    __proto__: dart.getMethods(visitor.RecursiveVisitor.__proto__),
    visitVariable: dart.fnType(dart.void, [ast.VariableNode]),
    visitNot: dart.fnType(dart.void, [ast.NotNode]),
    visitOr: dart.fnType(dart.void, [ast.OrNode]),
    visitAnd: dart.fnType(dart.void, [ast.AndNode]),
    visitConditional: dart.fnType(dart.void, [ast.ConditionalNode])
  }));
  dart.setLibraryUri(visitor.RecursiveVisitor, I[0]);
  ast.Node = class Node extends core.Object {};
  (ast.Node.new = function() {
    ;
  }).prototype = ast.Node.prototype;
  dart.addTypeTests(ast.Node);
  dart.addTypeCaches(ast.Node);
  dart.setLibraryUri(ast.Node, I[2]);
  var span$ = dart.privateName(ast, "VariableNode.span");
  var name$ = dart.privateName(ast, "VariableNode.name");
  ast.VariableNode = class VariableNode extends core.Object {
    get span() {
      return this[span$];
    }
    set span(value) {
      super.span = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get variables() {
      return T.JSArrayOfString().of([this.name]);
    }
    accept(T, visitor) {
      if (visitor == null) dart.nullFailed(I[3], 41, 26, "visitor");
      return visitor.visitVariable(this);
    }
    toString() {
      return this.name;
    }
    _equals(other) {
      if (other == null) return false;
      return ast.VariableNode.is(other) && this.name == other.name;
    }
    get hashCode() {
      return dart.hashCode(this.name);
    }
  };
  (ast.VariableNode.new = function(name, span = null) {
    if (name == null) dart.nullFailed(I[3], 38, 21, "name");
    this[name$] = name;
    this[span$] = span;
    ;
  }).prototype = ast.VariableNode.prototype;
  dart.addTypeTests(ast.VariableNode);
  dart.addTypeCaches(ast.VariableNode);
  ast.VariableNode[dart.implements] = () => [ast.Node];
  dart.setMethodSignature(ast.VariableNode, () => ({
    __proto__: dart.getMethods(ast.VariableNode.__proto__),
    accept: dart.gFnType(T => [T, [visitor.Visitor$(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ast.VariableNode, () => ({
    __proto__: dart.getGetters(ast.VariableNode.__proto__),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(ast.VariableNode, I[2]);
  dart.setFieldSignature(ast.VariableNode, () => ({
    __proto__: dart.getFields(ast.VariableNode.__proto__),
    span: dart.finalFieldType(dart.nullable(file.FileSpan)),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ast.VariableNode, ['toString', '_equals']);
  dart.defineExtensionAccessors(ast.VariableNode, ['hashCode']);
  var span$0 = dart.privateName(ast, "NotNode.span");
  var child$ = dart.privateName(ast, "NotNode.child");
  ast.NotNode = class NotNode extends core.Object {
    get span() {
      return this[span$0];
    }
    set span(value) {
      super.span = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get variables() {
      return this.child.variables;
    }
    accept(T, visitor) {
      if (visitor == null) dart.nullFailed(I[3], 67, 26, "visitor");
      return visitor.visitNot(this);
    }
    toString() {
      return ast.VariableNode.is(this.child) || ast.NotNode.is(this.child) ? "!" + dart.str(this.child) : "!(" + dart.str(this.child) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return ast.NotNode.is(other) && dart.equals(this.child, other.child);
    }
    get hashCode() {
      return ~dart.notNull(dart.hashCode(this.child)) >>> 0;
    }
  };
  (ast.NotNode.new = function(child, span = null) {
    if (child == null) dart.nullFailed(I[3], 64, 16, "child");
    this[child$] = child;
    this[span$0] = span;
    ;
  }).prototype = ast.NotNode.prototype;
  dart.addTypeTests(ast.NotNode);
  dart.addTypeCaches(ast.NotNode);
  ast.NotNode[dart.implements] = () => [ast.Node];
  dart.setMethodSignature(ast.NotNode, () => ({
    __proto__: dart.getMethods(ast.NotNode.__proto__),
    accept: dart.gFnType(T => [T, [visitor.Visitor$(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ast.NotNode, () => ({
    __proto__: dart.getGetters(ast.NotNode.__proto__),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(ast.NotNode, I[2]);
  dart.setFieldSignature(ast.NotNode, () => ({
    __proto__: dart.getFields(ast.NotNode.__proto__),
    span: dart.finalFieldType(dart.nullable(file.FileSpan)),
    child: dart.finalFieldType(ast.Node)
  }));
  dart.defineExtensionMethods(ast.NotNode, ['toString', '_equals']);
  dart.defineExtensionAccessors(ast.NotNode, ['hashCode']);
  var left$ = dart.privateName(ast, "OrNode.left");
  var right$ = dart.privateName(ast, "OrNode.right");
  ast.OrNode = class OrNode extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get span() {
      return ast._expandSafe(this.left.span, this.right.span);
    }
    get variables() {
      return new (T.SyncIterableOfString()).new((function* variables() {
        yield* this.left.variables;
        yield* this.right.variables;
      }).bind(this));
    }
    accept(T, visitor) {
      if (visitor == null) dart.nullFailed(I[3], 100, 26, "visitor");
      return visitor.visitOr(this);
    }
    toString() {
      let string1 = ast.AndNode.is(this.left) || ast.ConditionalNode.is(this.left) ? "(" + dart.str(this.left) + ")" : this.left;
      let string2 = ast.AndNode.is(this.right) || ast.ConditionalNode.is(this.right) ? "(" + dart.str(this.right) + ")" : this.right;
      return dart.str(string1) + " || " + dart.str(string2);
    }
    _equals(other) {
      if (other == null) return false;
      return ast.OrNode.is(other) && dart.equals(this.left, other.left) && dart.equals(this.right, other.right);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.left)) ^ dart.notNull(dart.hashCode(this.right))) >>> 0;
    }
  };
  (ast.OrNode.new = function(left, right) {
    if (left == null) dart.nullFailed(I[3], 97, 15, "left");
    if (right == null) dart.nullFailed(I[3], 97, 26, "right");
    this[left$] = left;
    this[right$] = right;
    ;
  }).prototype = ast.OrNode.prototype;
  dart.addTypeTests(ast.OrNode);
  dart.addTypeCaches(ast.OrNode);
  ast.OrNode[dart.implements] = () => [ast.Node];
  dart.setMethodSignature(ast.OrNode, () => ({
    __proto__: dart.getMethods(ast.OrNode.__proto__),
    accept: dart.gFnType(T => [T, [visitor.Visitor$(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ast.OrNode, () => ({
    __proto__: dart.getGetters(ast.OrNode.__proto__),
    span: dart.nullable(file.FileSpan),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(ast.OrNode, I[2]);
  dart.setFieldSignature(ast.OrNode, () => ({
    __proto__: dart.getFields(ast.OrNode.__proto__),
    left: dart.finalFieldType(ast.Node),
    right: dart.finalFieldType(ast.Node)
  }));
  dart.defineExtensionMethods(ast.OrNode, ['toString', '_equals']);
  dart.defineExtensionAccessors(ast.OrNode, ['hashCode']);
  var left$0 = dart.privateName(ast, "AndNode.left");
  var right$0 = dart.privateName(ast, "AndNode.right");
  ast.AndNode = class AndNode extends core.Object {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get span() {
      return ast._expandSafe(this.left.span, this.right.span);
    }
    get variables() {
      return new (T.SyncIterableOfString()).new((function* variables() {
        yield* this.left.variables;
        yield* this.right.variables;
      }).bind(this));
    }
    accept(T, visitor) {
      if (visitor == null) dart.nullFailed(I[3], 139, 26, "visitor");
      return visitor.visitAnd(this);
    }
    toString() {
      let string1 = ast.OrNode.is(this.left) || ast.ConditionalNode.is(this.left) ? "(" + dart.str(this.left) + ")" : this.left;
      let string2 = ast.OrNode.is(this.right) || ast.ConditionalNode.is(this.right) ? "(" + dart.str(this.right) + ")" : this.right;
      return dart.str(string1) + " && " + dart.str(string2);
    }
    _equals(other) {
      if (other == null) return false;
      return ast.AndNode.is(other) && dart.equals(this.left, other.left) && dart.equals(this.right, other.right);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.left)) ^ dart.notNull(dart.hashCode(this.right))) >>> 0;
    }
  };
  (ast.AndNode.new = function(left, right) {
    if (left == null) dart.nullFailed(I[3], 136, 16, "left");
    if (right == null) dart.nullFailed(I[3], 136, 27, "right");
    this[left$0] = left;
    this[right$0] = right;
    ;
  }).prototype = ast.AndNode.prototype;
  dart.addTypeTests(ast.AndNode);
  dart.addTypeCaches(ast.AndNode);
  ast.AndNode[dart.implements] = () => [ast.Node];
  dart.setMethodSignature(ast.AndNode, () => ({
    __proto__: dart.getMethods(ast.AndNode.__proto__),
    accept: dart.gFnType(T => [T, [visitor.Visitor$(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ast.AndNode, () => ({
    __proto__: dart.getGetters(ast.AndNode.__proto__),
    span: dart.nullable(file.FileSpan),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(ast.AndNode, I[2]);
  dart.setFieldSignature(ast.AndNode, () => ({
    __proto__: dart.getFields(ast.AndNode.__proto__),
    left: dart.finalFieldType(ast.Node),
    right: dart.finalFieldType(ast.Node)
  }));
  dart.defineExtensionMethods(ast.AndNode, ['toString', '_equals']);
  dart.defineExtensionAccessors(ast.AndNode, ['hashCode']);
  var condition$ = dart.privateName(ast, "ConditionalNode.condition");
  var whenTrue$ = dart.privateName(ast, "ConditionalNode.whenTrue");
  var whenFalse$ = dart.privateName(ast, "ConditionalNode.whenFalse");
  ast.ConditionalNode = class ConditionalNode extends core.Object {
    get condition() {
      return this[condition$];
    }
    set condition(value) {
      super.condition = value;
    }
    get whenTrue() {
      return this[whenTrue$];
    }
    set whenTrue(value) {
      super.whenTrue = value;
    }
    get whenFalse() {
      return this[whenFalse$];
    }
    set whenFalse(value) {
      super.whenFalse = value;
    }
    get span() {
      return ast._expandSafe(this.condition.span, this.whenFalse.span);
    }
    get variables() {
      return new (T.SyncIterableOfString()).new((function* variables() {
        yield* this.condition.variables;
        yield* this.whenTrue.variables;
        yield* this.whenFalse.variables;
      }).bind(this));
    }
    accept(T, visitor) {
      if (visitor == null) dart.nullFailed(I[3], 182, 26, "visitor");
      return visitor.visitConditional(this);
    }
    toString() {
      let conditionString = ast.ConditionalNode.is(this.condition) ? "(" + dart.str(this.condition) + ")" : this.condition;
      let trueString = ast.ConditionalNode.is(this.whenTrue) ? "(" + dart.str(this.whenTrue) + ")" : this.whenTrue;
      return dart.str(conditionString) + " ? " + dart.str(trueString) + " : " + dart.str(this.whenFalse);
    }
    _equals(other) {
      if (other == null) return false;
      return ast.ConditionalNode.is(other) && dart.equals(this.condition, other.condition) && dart.equals(this.whenTrue, other.whenTrue) && dart.equals(this.whenFalse, other.whenFalse);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.condition)) ^ dart.notNull(dart.hashCode(this.whenTrue)) ^ dart.notNull(dart.hashCode(this.whenFalse))) >>> 0;
    }
  };
  (ast.ConditionalNode.new = function(condition, whenTrue, whenFalse) {
    if (condition == null) dart.nullFailed(I[3], 179, 24, "condition");
    if (whenTrue == null) dart.nullFailed(I[3], 179, 40, "whenTrue");
    if (whenFalse == null) dart.nullFailed(I[3], 179, 55, "whenFalse");
    this[condition$] = condition;
    this[whenTrue$] = whenTrue;
    this[whenFalse$] = whenFalse;
    ;
  }).prototype = ast.ConditionalNode.prototype;
  dart.addTypeTests(ast.ConditionalNode);
  dart.addTypeCaches(ast.ConditionalNode);
  ast.ConditionalNode[dart.implements] = () => [ast.Node];
  dart.setMethodSignature(ast.ConditionalNode, () => ({
    __proto__: dart.getMethods(ast.ConditionalNode.__proto__),
    accept: dart.gFnType(T => [T, [visitor.Visitor$(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(ast.ConditionalNode, () => ({
    __proto__: dart.getGetters(ast.ConditionalNode.__proto__),
    span: dart.nullable(file.FileSpan),
    variables: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(ast.ConditionalNode, I[2]);
  dart.setFieldSignature(ast.ConditionalNode, () => ({
    __proto__: dart.getFields(ast.ConditionalNode.__proto__),
    condition: dart.finalFieldType(ast.Node),
    whenTrue: dart.finalFieldType(ast.Node),
    whenFalse: dart.finalFieldType(ast.Node)
  }));
  dart.defineExtensionMethods(ast.ConditionalNode, ['toString', '_equals']);
  dart.defineExtensionAccessors(ast.ConditionalNode, ['hashCode']);
  ast._expandSafe = function _expandSafe(start, end) {
    if (start == null || end == null) return null;
    if (!dart.equals(start.file, end.file)) return null;
    return start.expand(end);
  };
  dart.trackLibraries("packages/boolean_selector/src/visitor.dart", {
    "package:boolean_selector/src/visitor.dart": visitor,
    "package:boolean_selector/src/ast.dart": ast
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["visitor.dart","ast.dart"],"names":[],"mappings":"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","file":"../../../../../../../../E:/packages/boolean_selector/src/visitor.dart.lib.js"}');
  // Exports:
  return {
    src__visitor: visitor,
    src__ast: ast
  };
}));

//# sourceMappingURL=visitor.dart.lib.js.map
